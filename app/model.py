# -*- coding: utf-8 -*-
"""datapreprocess.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11WwrIYlYxKhvY9xTp2LrvuaODlovQRKq

#**Day 3**

##Importing libraries and dataset
"""

#importing libraries
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import MinMaxScaler
import pickle

#importing dataset
df=pd.read_csv("/content/train - train (2).csv")
   
 
df=df.fillna(method="bfill")

dummies = pd.get_dummies(df['wind_direction'])
df = df.drop('wind_direction',1)
df = pd.concat([df, dummies], axis=1)

for x in df.index:
  if df.loc[x,"month"]<1:
    df.loc[x,"month"]=None
  try:
    df.loc[x,"pressure"]=float(df.loc[x,"pressure"])
  except:
    df.loc[x,"pressure"]=None  
  for x in df.index:
    try:
      df.loc[x,"year"]=int(df.loc[x,"year"])
    except:
      df.loc[x,"year"]=None


df=df.fillna(method="bfill")


from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler
scaling = StandardScaler()#MinMaxScaler()
scaling.fit(df[['year','month','hour','pressure']])
df[['year','month','hour','pressure']]=scaling.fit_transform(df[['year','month','hour','pressure']])

print(np.where(df['wind_speed']>-60))
#replacing lower outlier
median = df.loc[df['wind_speed']>-60, 'wind_speed'].median()
df.loc[df.wind_speed<-60, 'wind_speed'] = np.nan
df.fillna(median,inplace=True)
#replacing upper outlier
print(np.where(df['wind_speed']>4))
median1 = df.loc[df['wind_speed']>4, 'wind_speed'].median()
df.loc[df.wind_speed>4, 'wind_speed'] = np.nan
df.fillna(median1,inplace=True)
df.boxplot(['wind_speed'])

#REPLACING OUTLIER IN rain COLUMN BY MEDIAN METHOD
# Position of the Outlier
print(np.where(df['rain']>0))
median2 = df.loc[df['rain']>0, 'rain'].median()
df.loc[df1.rain>0, 'rain'] = np.nan
df.fillna(median2,inplace=True)
df.boxplot(['rain'])


df=df.drop(['day'],1)


df= df.loc[:, ~df.columns.str.contains('^Unnamed')]


x = df.drop(['PM2.5'],axis=1)
y = df[['PM2.5']]

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.30, random_state=42)

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import accuracy_score
reg = RandomForestRegressor(n_estimators=13, random_state=0)
#training the dataset
reg.fit(x_train,y_train.values.ravel())



print("Predicted values of PM 2.5:", reg.predict(x_test))
y_pred = reg.predict(x_test)
# y_pred.shape



pickle.dump(reg, open('model.pkl','wb'))

model = pickle.load(open('model.pkl','rb'))

